//matrix transpose
#include <stdio.h>
#include <stdlib.h>

void transposeMatrix(int **original, int **transposed, int rows, int cols) {
    for (int i = 0; i < cols; i++) {
        for (int j = 0; j < rows; j++) {
            transposed[i][j] = original[j][i];
        }
    }
}

int main() {
    int rows, cols;

    // Input the number of rows and columns
    printf("Enter the number of rows: ");
    scanf("%d", &rows);
    printf("Enter the number of columns: ");
    scanf("%d", &cols);

    // Allocate memory for the original matrix
    int **original = (int **)malloc(rows * sizeof(int *));
    for (int i = 0; i < rows; i++) {
        original[i] = (int *)malloc(cols * sizeof(int));
    }

    // Input the elements of the original matrix
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &original[i][j]);
        }
    }

    // Allocate memory for the transposed matrix
    int **transposed = (int **)malloc(cols * sizeof(int *));
    for (int i = 0; i < cols; i++) {
        transposed[i] = (int *)malloc(rows * sizeof(int));
    }

    // Transpose the matrix
    transposeMatrix(original, transposed, rows, cols);

    // Display the original matrix
    printf("\nOriginal Matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", original[i][j]);
        }
        printf("\n");
    }

    // Display the transposed matrix
    printf("\nTransposed Matrix:\n");
    for (int i = 0; i < cols; i++) {
        for (int j = 0; j < rows; j++) {
            printf("%d ", transposed[i][j]);
        }
        printf("\n");
    }

    // Free allocated memory
    for (int i = 0; i < rows; i++) {
        free(original[i]);
    }
    free(original);
    for (int i = 0; i < cols; i++) {
        free(transposed[i]);
    }
    free(transposed);

    return 0;
}

